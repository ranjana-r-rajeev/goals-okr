import React, { useState, useEffect } from 'react'
import Head from 'next/head'
import DashboardLayout from '@/layout/DashboardLayout'
import { useQuery } from 'react-query'
import { getTeamByTeamId, deletePeople, getAvailablePeople } from '@/services/api'
import { useRouter } from 'next/router';
import Loader from '@/components/Loader/Loader'
import styled from '@emotion/styled'
import useBoundStore from '@/store';
import CustomButton from '@/components/CustomButton/customButton'
import NotFound from '@/components/NotFound/NotFound'
import AddPeople from '@/components/Modals/AddPeopleModal'

const TeamInfo = () => {

          const router = useRouter();
          const { id } = router.query;
          const activeOrganization = useBoundStore((state) => state.activeOrganization)
          const [actOrg, setActOrg] = useState(false);
          const [show, setShow] = useState(false);
          const [userid, setUserid] = useState('');
          const [options, setOptions] = useState([]);

          const { data: people = [], isLoading: peopleLoading, refetch: peopleRefetch } = useQuery('getAvailablePeople', () => getAvailablePeople(actOrg?.organization?.id), {
                    enabled: false,
                    onSuccess: (data) => {
                              console.log(data)
                              const opt = data.map((item, index) => {
                                        return {
                                                  label: `${item?.user?.id} ${item?.user?.firstName} ${item?.user?.lastName}`,
                                                  value: item?.user?.id
                                        }
                              })
                              setOptions(opt)
                    }
          })

          const { isLoading, data, refetch } = useQuery('team' + id, () => getTeamByTeamId(id), {
                    onSuccess: () => {
                              setShow(false)
                    }
          })

          const { isLoading: deleteLoading, refetch: deleteRefetch } = useQuery('deletePeople', () => deletePeople(id, actOrg?.organization?.id, userid), {
                    enabled: false,
                    onSuccess: () => {
                              refetch()
                              peopleRefetch()
                    }
          })

          useEffect(() => {
                    if (activeOrganization && Object.keys(activeOrganization).length > 0) {
                              setActOrg(activeOrganization)
                    }
          }, [activeOrganization])

          useEffect(() => {
                    if (actOrg && Object.keys(actOrg).length > 0) {
                              refetch();
                              peopleRefetch();
                    }
          }, [actOrg])

          useEffect(() => {
                    if (userid != '') {
                              deleteRefetch();
                    }
          }, [userid])

          return (
                    <>
                              <Head>
                                        <title>Create Next App</title>
                                        <meta name="description" content="Generated by create next app" />
                                        <meta name="viewport" content="width=device-width, initial-scale=1" />
                                        <link rel="icon" href="/favicon.ico" />
                              </Head>
                              <main>
                                        <DashboardLayout screen={"teams"}>
                                                  <AddPeople show={show} setShow={setShow} cb={() => refetch()} orgid={actOrg?.organization?.id} teamid={id} options={options} />
                                                  {
                                                            isLoading &&
                                                            <Loader />
                                                  }
                                                  <TeamInfoWrapper>
                                                            <div className="d-flex justify-content-between align-items-center" >
                                                                      <div>
                                                                                <p className="heading" >{data?.name}</p>
                                                                                <p className="desc mt-1" >{data?.description}</p>
                                                                      </div>
                                                                      {
                                                                                actOrg?.role != "Employee" &&
                                                                                <div>
                                                                                          <CustomButton text={"Add People"} className="px-4" onClick={() => setShow(true)} />
                                                                                </div>
                                                                      }
                                                            </div>

                                                            {
                                                                      !isLoading && data?.teamUsers?.length == 0 &&
                                                                      <div style={{ position: "relative", minHeight: '65vh' }} >
                                                                                <NotFound
                                                                                          title={"No people found in Team"}
                                                                                          desc={"Click the button below to add people in the team"}
                                                                                          btnText={"Add People"}
                                                                                          onClick={() => setShow(true)}
                                                                                />
                                                                      </div> ||
                                                                      <div style={{ overflow: 'auto' }} >
                                                                                <table className={'tableWrapper mt-3'} >
                                                                                          <thead className={"theadWrapper"}  >
                                                                                                    <tr className={"theadTrWrapper"}>
                                                                                                              <th>First Name</th>
                                                                                                              <th>Last Name</th>
                                                                                                              <th>Email</th>
                                                                                                              <th>Action</th>
                                                                                                    </tr>
                                                                                          </thead>
                                                                                          <tbody className={"tbodyWrapper"}>
                                                                                                    {
                                                                                                              data?.teamUsers?.map((item, index) => (
                                                                                                                        <tr className="tbodyTrWrapper" >
                                                                                                                                  <td>{item?.user?.firstName}</td>
                                                                                                                                  <td>{item?.user?.lastName}</td>
                                                                                                                                  <td>{item?.user?.email}</td>
                                                                                                                                  <td>
                                                                                                                                            <p onClick={() => setUserid(item?.user?.id)} className="error" role="button" >Delete</p>
                                                                                                                                  </td>
                                                                                                                        </tr>
                                                                                                              ))
                                                                                                    }
                                                                                          </tbody>
                                                                                </table>
                                                                      </div>
                                                            }


                                                  </TeamInfoWrapper>
                                        </DashboardLayout>
                              </main>
                    </>
          )
}

export default TeamInfo

const TeamInfoWrapper = styled.div`
          .desc{
                    color : var(--mediumGrey);
          }
          .tableWrapper{
                    width: 100%;
                    overflow-x: auto;
          }
          .theadTrWrapper th:first-of-type{
                    border-top-left-radius: 5px;
          }
          .theadTrWrapper th:last-of-type{
                    border-top-right-radius: 5px;
          }
          .theadTrWrapper th{
                    background-color: var(--accent); 
                    opacity: .8;
          }
          .tbodyTrWrapper td, .theadTrWrapper th{
                    padding: 8px 10px 8px 20px;
                    white-space: nowrap;
          }
          .theadTrWrapper th{
                    color : #fff
          }
          .tbodyWrapper .tbodyTrWrapper:nth-child(even){
                    background-color: var(--accent_light); 
          }
          .tbodyWrapper .tbodyTrWrapper:nth-child(odd){
                    background-color: var(--background-color); 
          }
          .tbodyTrWrapper:last-of-type td:first-of-type{
                    border-bottom-left-radius: 5px;
          }
          .tbodyTrWrapper:last-of-type td:last-of-type{
                    border-bottom-right-radius: 5px;
          }
          .tbodyTrWrapper td:nth-of-type(4){
                    display: flex;
                    justify-content: space-between;
          }
`